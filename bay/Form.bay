<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.Widget.Form.Form">

<use name="Runtime.Widget.Input" component="true" />
<use name="Runtime.Widget.RenderListModel" />
<use name="Runtime.Widget.RowButtons" component="true" />
<use name="Runtime.Widget.WidgetResult" component="true" />
<use name="Runtime.Widget.Form.FormModel" />


<style>
.widget_form__row{
	margin-bottom: calc(var(--widget-space) * 3);
}
.widget_form__row_label{
	display: block;
	font-weight: bold;
	margin-bottom: var(--widget-space);
}
.widget_form__field_error{
	color: var(--widget-color-danger);
	margin-top: var(--widget-space);
}
.widget_form %(RowButtons)widget_form__top_buttons{
	margin-bottom: calc(var(--widget-space) * 3);
}
.widget_form %(RowButtons)widget_form__bottom_buttons{
	margin-top: var(--widget-space);
	justify-content: center;
}
</style>


<template name="renderTopButtons">
	%if (this.model.top_buttons.count() > 0)
	{
		<RowButtons @model={{ this.model.top_buttons }} />
	}
</template>


<template name="renderBottomButtons">
	%if (this.model.bottom_buttons.count() > 0)
	{
		<RowButtons @model={{ this.model.bottom_buttons }} />
	}
</template>


<template name="renderField" args="Dict field">
	%set string field_name = field.get("name");
	%set string field_component = field.get("component", null);
	%set string field_model = field.get("model", null);
	%set string props = field.get("props", {});
	<div class="widget_form__field" @key={{ field_name }}>
		<{field_component} name={{ field_name }} @model={{ field_model }}
			value={{ this.model.getItemValue(this.model.storage.item, field_name) }}
			@event:onChange={{ this.onChangeField(field_name) }}
			data={{{
				"field_name": field_name,
			}}}
			...props
		/>
	</div>
</template>


<template name="renderRow" args="Dict field">
	
	%set string field_name = field.get("name");
	
	<div class="widget_form__row" @key={{ field_name }}>
		
		<label class="widget_form__row_label">{{ field.get("label") }}</label>
		
		%render this.renderField(field);
		
		%set Collection<string> field_error = this.model.getFieldResult(field_name);
		%if (field_error.count() == 0)
		{
			<div class="widget_form__field_error widget_form__field_error--hide"
				data-name={{ field_name }} @key="result1"></div>
		}
		%else
		{
			<div class="widget_form__field_error" data-name={{ field_name }} @key="result2">
				%for (int i=0; i<field_error.count(); i++)
				{
					<div>{{ field_error.get(i) }}</div>
				}
			</div>
		}
		
	</div>
</template>


<template name="renderContent">
	<div class="widget_form__content">
		%for (int i=0; i<this.model.fields.count(); i++)
		{
			%set Dict field = this.model.fields.get(i);
			%render this.renderRow(field);
		}
	</div>
</template>


<template name="renderResult">
	<WidgetResult @model={{ this.model.storage.result }} />
</template>


<template name="renderForm">
	<form method="POST"
		enctype="multipart/form-data" onsubmit="return false;"
	>
		%render this.renderContent();
		%render this.renderBottomButtons();
		%render this.renderResult();
	</form>
</template>


<template name="renderWidgets">
	%set RenderListModel render_list = this.model.getWidget("render_list");
	%if (render_list)
	{
		%set string component = render_list.component;
		<{component} @model={{ render_list }} />
	}
</template>


<template>
	<div class="widget_form" class={{ this.getStyles() }}>
		%render this.renderTopButtons();
		%render this.renderForm();
		%render this.renderWidgets();
	</div>
</template>


<script>

/**
 * Returns styles
 */
string getStyles() => this.model.styles.join(" ");


/**
 * Change field
 */
void onChangeField(string field_name)
{
	return void (var e) use (field_name)
	{
		this.model.onChangeField(field_name, e.target.value);
	};
}

</script>


</class>
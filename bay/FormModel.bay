/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Form;

use Runtime.Web.BaseWidget;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.Styles;
use Runtime.Widget.Crud.CrudApiStorage;
use Runtime.Widget.Form.Form;


class FormModel extends BaseWidget
{
	CrudApiStorage storage = null;
	string component = classof Form;
	string widget_name = "form";
	Vector<Map> fields = [];
	RowButtonsModel top_buttons = new RowButtonsModel{
		"styles": ["@widget_form__top_buttons"]
	};
	Styles styles = new Styles{ "prefix": "widget_form" };
	
	
	/**
	 * Constructor
	 */
	void constructor(Dict params = null)
	{
		parent(params);
		if (params)
		{
			if (params.has("styles")) this.styles.addStyles(params.get("styles"));
		}
	}
	
	
	/**
	 * Set data provider
	 */
	void setDataStorage(CrudApiStorage storage)
	{
		this.storage = storage;
	}
	
	
	/**
	 * Add field
	 */
	void addField(Map field)
	{
		this.fields.append(field);
	}
	
	
	/**
	 * Returns field result
	 */
	Collection getFieldResult(string field_name) => [];
	
	
	/**
	 * Clear form
	 */
	void clear()
	{
		this.storage.clear();
		for (int i=0; i<this.fields.count(); i++)
		{
			Dict field = this.fields.get(i);
			string field_name = field.get("name");
			var default_value = field.get("default", "");
			this.storage.item.set(field_name, default_value);
		}
	}
	
	
	/**
	 * Change field
	 */
	void onChangeField(string field_name, var value)
	{
		this.storage.item.set(field_name, value);
	}
	
	
	/**
	 * Returns error message
	 */
	string getErrorMessage() => this.storage.error.message;
	
	
	/**
	 * Import data
	 */
	void importData(Map import_data)
	{
		parent(import_data);
		this.storage.importData(import_data.get("storage"));
	}
	
	
	/**
	 * Export data
	 */
	Map exportData()
	{
		Map data = parent();
		data.set("storage", this.storage.exportData());
		return data;
	}
	
	
	/**
	 * Load table data
	 */
	async void loadData()
	{
		await parent();
		/* await this.storage.doSearch(); */
	}
	
	
	/**
	 * Save form
	 */
	async void save()
	{
		this.storage.error.setWaitMessage();
		await this.storage.doSave();
	}
	
}